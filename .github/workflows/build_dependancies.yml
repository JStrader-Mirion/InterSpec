name: Build Dependencies

on: workflow_call:

jobs:  
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2.6.0
        with:
          submodules: 'true'

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64
          vsversion: 2022

      # Get CMake, see https://github.com/marketplace/actions/get-cmake
      - name: get-cmake
        uses: lukka/get-cmake@v3.24.3
      
      #Now go to using: https://github.com/marketplace/actions/run-cmake      
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Building branch ${{ github.ref }} of repository ${{ github.repository }}."
      - run: echo "ðŸ’¡ The ${{ github.repository }} repository has been cloned to the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
  
  # TODO: the below needs an if to only run on windows
      - name: Cache Windows Dependencies
        if: runner.os == 'Windows'
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: '${{runner.temp}}/install'
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/dep_build_msvc2022.bat') }}
    
# TODO: dep_build_msvc2022.bat seems to work just fine from PowerShell, so we should really switch to just always using that to be consistent across platforms
      - name: Build dependencies on windows
        shell: cmd
        if: steps.cache-deps.outputs.cache-hit != 'true' && runner.os == 'Windows'
        working-directory: ${{runner.temp}}
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          ${{ github.workspace }}\target\patches\dep_build_msvc2022.bat "${{runner.temp}}\dep_build" "${{runner.temp}}\install"

      - name: List files in prefix
        run: |
          echo "In Install"
          ls '${{runner.temp}}/install'
          echo "In Install/lib"
          ls '${{runner.temp}}/install/lib'
          echo "In Install/include"
          ls '${{runner.temp}}/install/include'
          echo "In Install/bin"
          ls '${{runner.temp}}/install/bin'

      - run: echo "Job status is ${{ job.status }}."



