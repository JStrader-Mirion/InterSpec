name: CMake Build Matrix

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "Windows Latest MSVC-2022",
            os: windows-latest,
            artifact: "windows_msvc2022.7z",
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            archiver: "7z a",
            generators: "Visual Studio 17 2022"
          }


    steps:
      - name: Check out repository code
        uses: actions/checkout@v2.6.0
        with:
          submodules: 'true'

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64
          vsversion: 2022

      # Get CMake, see https://github.com/marketplace/actions/get-cmake
      - name: get-cmake
        uses: lukka/get-cmake@v3.24.3
      
      #Now go to using: https://github.com/marketplace/actions/run-cmake      
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Building branch ${{ github.ref }} of repository ${{ github.repository }}."
      - run: echo "ðŸ’¡ The ${{ github.repository }} repository has been cloned to the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
  
  # TODO: the below needs an if to only run on windows
      - name: Cache Windows Dependencies
        if: runner.os == 'Windows'
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: '${{runner.temp}}/install'
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/dep_build_msvc2022.bat') }}
    
# TODO: dep_build_msvc2022.bat seems to work just fine from PowerShell, so we should really switch to just always using that to be consistent across platforms
      - name: Build dependencies on windows
        shell: cmd
        if: steps.cache-deps.outputs.cache-hit != 'true' && runner.os == 'Windows'
        working-directory: ${{runner.temp}}
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          ${{ github.workspace }}\target\patches\dep_build_msvc2022.bat "${{runner.temp}}\dep_build" "${{runner.temp}}\install"

      - name: List files in prefix
        run: |
          echo "In Install"
          ls '${{runner.temp}}/install'
          echo "In Install/lib"
          ls '${{runner.temp}}/install/lib'
          echo "In Install/include"
          ls '${{runner.temp}}/install/include'
          echo "In Install/bin"
          ls '${{runner.temp}}/install/bin'

# We'll cache the InterSpec build directory so we dont have to build from scratch (about a 20 or 25 minute process) on every push
      - name: Cache wxWidgets config/build
        id: cache-wx-build
        uses: actions/cache@v3
        with:
          path: '${{runner.temp}}/build_${{ runner.os }}_wx_app'
          key: ${{ runner.os }}-wx-app-build-${{ hashFiles('**/CMakeLists.txt') }}
    
      - name: Initial wxWidgets config/build
        shell: cmd
        if: steps.cache-wx-build.outputs.cache-hit != 'true' && runner.os == 'Windows'
        working-directory: ${{runner.temp}}
        run: |
          mkdir build_${{ runner.os }}_wx_app
          cd build_${{ runner.os }}_wx_app
          cmake -DInterSpec_FETCH_DEPENDENCIES=OFF -DCMAKE_INSTALL_PREFIX=InterSpec_app_${{ runner.os }}_WebView_head -DCMAKE_PREFIX_PATH="${{runner.temp}}\install" -DNO_CMAKE_SYSTEM_PATH=ON -DCMAKE_FIND_USE_CMAKE_SYSTEM_PATH=OFF "${{ github.workspace }}/target/wxWidgets"
          cmake --build . --config Release

      - name: wxWidgets app build
        shell: cmd
        if: runner.os == 'Windows'
        working-directory: ${{runner.temp}}/build_${{ runner.os }}_wx_app
        run: |
          cmake --build . --config Release
          cmake --build . --config Release --target install
          echo This is an automated build of InterSpec built on the github infrastruction at %date% %time% >> InterSpec_app_${{ runner.os }}_WebView_head\build_info.txt
          echo No testing has been performed on this build. >> InterSpec_app_${{ runner.os }}_WebView_head\build_info.txt
          echo InterSpec code git has SHA: %GITHUB_SHA% >> InterSpec_app_${{ runner.os }}_WebView_head\build_info.txt

      - name: Upload wxWidgets app to as GitHub Artifact
        uses: actions/upload-artifact@v3.1.1
        if: runner.os == 'Windows'
        with: 
          name: InterSpec_app_${{ runner.os }}_WebView_head
          path: '${{runner.temp}}/build_${{ runner.os }}_wx_app/InterSpec_app_${{ runner.os }}_WebView_head'


      - name: Cache tests config/build
        id: cache-tests-build
        uses: actions/cache@v3
        with:
          path: '${{runner.temp}}/build_${{ runner.os }}_tests'
          key: ${{ runner.os }}-tests-build-${{ hashFiles('**/CMakeLists.txt') }}
    
      - name: Initial tests config/build
        shell: cmd
        if: steps.cache-tests-build.outputs.cache-hit != 'true'
        working-directory: ${{runner.temp}}
        run: |
          mkdir build_${{ runner.os }}_tests
          cd build_${{ runner.os }}_tests
          cmake -DInterSpec_FETCH_DEPENDENCIES=OFF -DCMAKE_PREFIX_PATH="${{runner.temp}}\install" -DNO_CMAKE_SYSTEM_PATH=ON -DCMAKE_FIND_USE_CMAKE_SYSTEM_PATH=OFF -DCMAKE_BUILD_TYPE=Debug "${{ github.workspace }}/target/testing"
          cmake --build . --config Debug

      - name: Run tests
        shell: cmd
        working-directory: ${{runner.temp}}/build_${{ runner.os }}_tests
        run: |
          cmake --build . --config Debug
          cmake --build . --target RUN_TESTS

      - name: Upload test log as GitHub Artifact
        uses: actions/upload-artifact@v3.1.1
        with: 
          name: InterSpec_test_log
          path: '${{runner.temp}}/build_${{ runner.os }}_tests/Testing/Temporary/LastTest.log'

      - run: echo "Job status is ${{ job.status }}."



