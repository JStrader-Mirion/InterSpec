name: Build InterSpec Dependencies
description: Sets up build environment, and builds InterSpec dependencies

runs:
  using: "composite"
  steps:
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64
        vsversion: 2022

    # Get CMake, see https://github.com/marketplace/actions/get-cmake
    - name: get-cmake
      uses: lukka/get-cmake@v3.24.3
      
    #Now go to using: https://github.com/marketplace/actions/run-cmake     
    - name: Print some info
      shell: cmd
      run: | 
        echo "The job was automatically triggered by a ${{ github.event_name }} event."
        echo "This job is now running on a ${{ runner.os }} server hosted by GitHub"
        echo "Building branch ${{ github.ref }} of repository ${{ github.repository }}."
        echo "The ${{ github.repository }} repository has been cloned to the runner."
        echo "The files in the repository:
        ls ${{ github.workspace }}
  
  # TODO: the below needs an if to only run on windows
    - name: Cache Windows Dependencies
      if: runner.os == 'Windows'
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: '${{runner.temp}}/install'
        key: ${{ runner.os }}-dependencies-${{ hashFiles('**/dep_build_msvc2022.bat') }}
    
# TODO: dep_build_msvc2022.bat seems to work just fine from PowerShell, so we should really switch to just always using that to be consistent across platforms
    - name: Build dependencies on windows
      shell: cmd
      if: steps.cache-deps.outputs.cache-hit != 'true' && runner.os == 'Windows'
      working-directory: ${{runner.temp}}
      run: |
        echo github.event.action: ${{ github.event.action }}
        echo github.event_name: ${{ github.event_name }}
        echo github.workflow: ${{ github.workflow }}
        ${{ github.workspace }}\target\patches\dep_build_msvc2022.bat "${{runner.temp}}\dep_build" "${{runner.temp}}\install"


# Note: caching the build doesnt work - each checkout sets each files timestamps to current time, so we will use ccache action
#       but after building the dependencies
# Currently it looks like There is an issue with SCCACHE_DIR... maybe.  See https://github.com/hendrikmuhs/ccache-action/blob/main/src/restore.ts will maybe need to set the `GITHUB_WORKSPACE` environment variable...
# TODO: key should actually be: key: sccache-${{ github.job }}-${{ matrix.os }}
    - name: Ccache for gh actions
      uses: hendrikmuhs/ccache-action@v1.2.7
      with: 
        key: sccache-${{ github.job }}
        max-size: 10G
        variant: sccache
        append-timestamp: false
        verbose: 2
        
#    - name: Cache sccache dir
#      id: cache-sccache-build
#      uses: actions/cache@v3
#      with:
#        path: '${{runner.temp}}/.sccache'
#        key: ${{ runner.os }}-build-wx-sccache-${{ hashFiles('**/CMakeLists.txt') }}
#    
#    - name: Create sccache dir
#      shell: pwsh
#      if: steps.cache-sccache-build.outputs.cache-hit != 'true' && runner.os == 'Windows'
#      working-directory: ${{runner.temp}}
#      run: |
#        mkdir .sccache
        

# Currently having some trouble getting sccache to work - so will try some debugging
    - name: Restart sccache
      shell: pwsh
      if: runner.os == 'Windows'
      run: |
        sccache --stop-server
        $scachpath = "${{ github.workspace }}/.sccache"
        If(!(test-path -PathType container $scachpath)){ New-Item -ItemType Directory -Path $scachpath }
        $env:SCCACHE_DIR = $scachpath
        $env:SCCACHE_IDLE_TIMEOUT = 0
        $env:SCCACHE_CACHE_SIZE = '10G'
        $env:SCCACHE_ERROR_LOG = '${{runner.temp}}/sccache_log.txt'
        $env:SCCACHE_LOG = 'debug'
        sccache --start-server

    - name: List files in prefix
      shell: pwsh
      run: |
        echo "In Install"
        ls '${{runner.temp}}/install'
        echo "In Install/lib"
        ls '${{runner.temp}}/install/lib'
        echo "In Install/include"
        ls '${{runner.temp}}/install/include'
        echo "In Install/bin"
        ls '${{runner.temp}}/install/bin'
        echo github.event.action: ${{ github.event.action }}
        echo github.event_name: ${{ github.event_name }}
        echo github.workflow: ${{ github.workflow }}





