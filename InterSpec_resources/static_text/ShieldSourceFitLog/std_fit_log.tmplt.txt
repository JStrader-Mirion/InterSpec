Foreground LiveTime: {% if foreground.LiveTimeSeconds %}{{ foreground.LiveTimeSeconds }}{% endif %} {% if foreground.LiveTimeStr %}({{ foreground.LiveTimeStr }}){% endif %}
{% if FixedGeometryDetector %}Results given as {{ FixedGeometryType }}.{% else %}Distance to source center from detector: {{ ActShieldFitSetup.DistanceStr }}{% endif %}
{% if Detector %}Detector: {{ Detector.Name }} radius {{ Detector.RadiusStr }}{% endif %}
{% if ActShieldFitSetup.FitOptions.InterferenceCorrection %}Allowing multiple nuclides being fit for to potentially contribute to the same photopeak{% else %}Not allowing multiple nuclides being fit for to contribute to the same photopeak{% endif %}
{% if ActShieldFitSetup.FitOptions.DecayDuringMeasurement %}Branching ratios are being corrected for nuclide decay during measurement{% endif %}


Sources:
## for src in Sources
  For {{ src.Nuclide }} at age {{ src.Age }}{% if src.AgeIsFit %} +- {{ src.AgeUncert }} {% endif %} with activity {{ src.Activity }}{% if src.ActivityIsFit %} +- {{ src.ActivityUncert }} {% endif %}{% if src.IsTraceSource %}(src.TraceDisplayActivity{% if src.ActivityIsFit %} +- {{ src.TraceDisplayActivityUncert }} {% endif %}){% endif %}:
## for peak in src.PeaksThisNucContributesTo
## for gamma in peak.ThisNucsGammasForPeak
    Peak attributed to {{ peak.DecayParticleEnergy }} keV received {{ gamma.CpsContributedToPeak }} from {{ gamma.Energy }} keV line{% if existsIn(gamma,"DecayCorrection") %} (decay correction {{ gamma.DecayCorrection }}){% endif %}, which has I={{ gamma.BranchingRatio }}
##endfor
##endfor
## endfor

{% if exists("Shieldings") %}
Shieldings:
## for shield in Shieldings.Shields
{% if shield.IsGeneric %}
    Generic AN={{ shield.AN }}, AD={{ shield.AD }} g/cm3:
{% else %}
    {{ shield.Name }}{% if existsIn(shield,"Formula") %}, {{ shield.Formula }},{% endif %} density={{ shield.Density }} g/cm3, {{ Shieldings.Geometry }}: [{% for dimNum in range(Shieldings.NumDimensions) %}{% if dimNum > 1 %}, {% endif %}{{ at(Shieldings.DimensionMeanings,dimNum) }}_thickness={{at(shield.Thicknesses,dimNum)}}{% endfor %}]
{% endif %}
{% if exists("PeaksUsedForActivityFitting") %}
## for peak in PeaksUsedForActivityFitting.Peaks
        {% if (shield.ShieldingNumber < length(peak.ShieldAttenuations)) and (at(peak.ShieldAttenuations,shield.ShieldingNumber) > 0.0) %}For peak at {{ peak.Energy}} keV, attenuation multiple of {{ at(peak.ShieldAttenuations,shield.ShieldingNumber) }}{% endif %}

##endfor
{% endif %}

##endfor
{% endif %}


Detector Efficiency Effects:
{% if exists("PeaksUsedForActivityFitting") %}
## for peak in PeaksUsedForActivityFitting.Peaks
    {{ peak.Energy }} keV photopeak reduced by {{ peak.DetectorSolidAngleFraction }} * {{ peak.DetectorIntrinsicEff }} = {{ peak.DetectorEff}} ((solid angle)*(det intrinsic eff)=eff)
##endfor
{% endif %}


Chi2 Contributions Of Peaks:
{% if exists("PeaksUsedForActivityFitting") %}
## for peak in PeaksUsedForActivityFitting.Peaks
    At {{ peak.Energy }} keV expected {{ peak.PredictedCounts }} counts, recieved {{ peak.SignalCounts }} +- {{ peak.SignalCountsUncert }}. giving (observed-expected)/uncert={{ peak.PredictedNumSigmaOff }}
##endfor
{% endif %}
&nbsp;
There were {{ NumDof }} parameters fit for
It took {{ NumberFcnCalls }} solution trials to reach chi2={{ FitChi2 }} with an estimated distance to minumum of {{ EstimatedDistanceToMinimum }}
## for src in Sources
{{ src.Nuclide }} fit activity {{ src.Activity }}{% if src.ActivityIsFit %} with uncertainty {{ src.ActivityUncert }} ({{ src.ActivityUncertPercent }}) {% endif %} at {% if src.AgeIsFit %}assumed {% else %}fit {% endif %} age {{ src.Age }}
## endfor
Geometry: {{ ActShieldFitSetup.Geometry }}
{% if exists("Shieldings") %}
Shieldings:
## for shield in Shieldings.Shields
{% if shield.IsGeneric %}
    Generic shielding AN={{ shield.AN }}, AD={{ shield.AD }} g/cm3
{% else %}
    {{ shield.Name }} has density {{ shield.Density }} g/cm3 and dimensions {% for i in range(shield.NumDimensions) %} {{ at(Shieldings.DimensionMeanings,i) }}: {{ at(shield.Thicknesses, i) }}{% if at(shield.DimensionIsFit, i) %} (+-{{ at(shield.ThicknessesUncerts,i) }}) {% endif %} {% endfor %}
{% endif %}
##endfor
{% endif %}
