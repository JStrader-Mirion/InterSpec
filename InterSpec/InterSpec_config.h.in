#ifndef InterSpec_config_h
#define InterSpec_config_h
/* InterSpec: an application to analyze spectral gamma radiation data.
 
 Copyright 2018 National Technology & Engineering Solutions of Sandia, LLC
 (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
 Government retains certain rights in this software.
 For questions contact William Johnson via email at wcjohns@sandia.gov, or
 alternative emails of interspec@sandia.gov.
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#cmakedefine01 BUILD_AS_LOCAL_SERVER
#cmakedefine01 BUILD_AS_OSX_APP
#cmakedefine01 BUILD_AS_ELECTRON_APP
#cmakedefine01 BUILD_AS_WX_WIDGETS_APP
#cmakedefine01 BUILD_FOR_WEB_DEPLOYMENT

#cmakedefine01 PERFORM_DEVELOPER_CHECKS
#cmakedefine01 USE_OSX_NATIVE_MENU
#cmakedefine01 USE_ELECTRON_NATIVE_MENU

// 20210604: started playing around with using FLEX layout its not there yet, but shows some promise.
//   Items that need to be worked on:
//     - [ ] Controlling time chart height properly.
//     - [ ] When tool tabs are hidden, and one of those tools is selected to show, properly handling that
//     - [ ] Allowing to resize the tool tabs and time chart.
//     - [ ] Propagating tool tab size changes to wtResize(...) in JS to allow those tabs layouts
//           to change - or reimplementing their layouts using CSS grid or flex
#cmakedefine01 USE_CSS_FLEX_LAYOUT

#cmakedefine01 USE_REL_ACT_TOOL

// Since USE_ELECTRON_NATIVE_MENU can be set to true without BUILD_AS_ELECTRON_APP being true, you
//  have to test both its an electron app, and the menu type, so we'll create a little bit of a
//  shortcut
//  \TODO: There is probably a cleaner way to define things...
#if( BUILD_AS_ELECTRON_APP )
  #if( USE_ELECTRON_NATIVE_MENU )
    #define USING_ELECTRON_NATIVE_MENU 1
  #else
    #define USING_ELECTRON_NATIVE_MENU 0
  #endif
#else
  #define USING_ELECTRON_NATIVE_MENU 0
#endif


#cmakedefine01 BUILD_AS_UNIT_TEST_SUITE
#cmakedefine01 INCLUDE_ANALYSIS_TEST_SUITE
#cmakedefine TEST_SUITE_BASE_DIR "@TEST_SUITE_BASE_DIR@"
#cmakedefine01 BUILD_AS_COMMAND_LINE_CODE_DEVELOPMENT

#cmakedefine01 DRAW_GAMMA_LINES_LOG_AND_LIN
#cmakedefine01 USE_DB_TO_STORE_SPECTRA
#cmakedefine01 USE_SPECRUM_FILE_QUERY_WIDGET

#cmakedefine01 USE_MYSQL_DB
#cmakedefine01 USE_SQLITE3_DB
#cmakedefine01 USE_GOOGLE_MAP
#cmakedefine01 USE_LEAFLET_MAP
#cmakedefine01 USE_SEARCH_MODE_3D_CHART
#cmakedefine01 USE_TERMINAL_WIDGET
#cmakedefine01 USE_DETECTION_LIMIT_TOOL
#cmakedefine01 USE_QR_CODES
#cmakedefine01 USE_REMOTE_RID
#cmakedefine01 USE_BATCH_TOOLS
#cmakedefine01 SpecUtils_ENABLE_D3_CHART
#cmakedefine01 SpecUtils_NO_BOOST_LIB

#cmakedefine DATABASE_PASSWORD_FILE "@DATABASE_PASSWORD_FILE@"

#cmakedefine InterSpec_VERSION "@PROJECT_VERSION@"

#cmakedefine MAX_SPECTRUM_MEMMORY_SIZE_MB @MAX_SPECTRUM_MEMMORY_SIZE_MB@

#cmakedefine MYSQL_DATABASE_TO_USE "@MYSQL_DATABASE_TO_USE@"

#cmakedefine GOOGLE_MAPS_KEY "@GOOGLE_MAPS_KEY@"

#cmakedefine LEAFLET_MAPS_KEY "@LEAFLET_MAPS_KEY@"

#if ( defined(WIN32) || defined(UNDER_CE) || defined(_WIN32) || defined(WIN64) )
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <float.h>
#define isnan(x) _isnan(x)
#define isinf(x) (!_finite(x))
#endif

#ifndef IsInf
#define IsInf(x) (std::isinf)(x)
#endif

#ifndef IsNan
#define IsNan(x) (std::isnan)(x)
#endif

// Sets up the message handler, assuming it's standalone.
#define passMessage(message,priority) \
  {if(dynamic_cast<InterSpecApp*>(Wt::WApplication::instance())) \
    dynamic_cast<InterSpecApp*>(Wt::WApplication::instance())->svlog(message,priority); \
  else \
    std::cerr << "passMessage: " << message << std::endl;}


#cmakedefine HAS_WTDBOSQLITE3 1
#cmakedefine HAS_WTDBOMYSQL 1
#cmakedefine HAS_WTDBOPOSTGRES 1
#cmakedefine HAS_WTDBOFIREBIRD 1
#cmakedefine HAS_ZLIB_SUPPORT 1

#if(PERFORM_DEVELOPER_CHECKS)
//log_developer_error(...) is implemented in SpectrumDataStructs.cpp, but
//  declared here so can be used everywhere.
//Error messages go to developer_errors.log in the cwd
void log_developer_error( const char *location, const char *error );
#endif

// Define a date/time format to print WDateTime values to for display to the user.
//  Will use the format that is the same as `SpecUtils::to_common_string(time_point)`,
//  Ex, "9-Sep-2014 15:02:15"
#define DATE_TIME_FORMAT_STR "d-MMM-yyyy hh:mm:ss"

/** Define a number of channels where if the spectrum has more than this, we'll assume this is high-resolution.
 
 TODO: should instead define an average keV per channel for this purpose.  Some limited energy
 range HPGe detectors may only have 4096 channels.
 */
#define HIGH_RES_NUM_CHANNELS 5000


// Prevent some compile warnings from using like _1 instead of
//  boost::placeholders::_1 (I think this must be in the Wt
//  headers, since our code uses the namespace prefixes)
#define BOOST_BIND_GLOBAL_PLACEHOLDERS

#endif // InterSpec_config_h
